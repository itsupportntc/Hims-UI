{"ast":null,"code":"import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\n * Angular Template Compiler\n */\n\nexport function compile(templateEle, helper) {\n  if (typeof templateEle === 'string') {\n    return stringCompiler(templateEle, helper);\n  } else {\n    var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n    var pName_1 = templateEle.elementRef.nativeElement.propName; //tslint:disable-next-line        \n\n    return function (data, component, propName) {\n      var context = {\n        $implicit: data\n      };\n      /* istanbul ignore next */\n\n      var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n      var viewRef = conRef.createEmbeddedView(templateEle, context);\n\n      if (getValue('currentInstance.element.nodeName', conRef) === 'EJS-MENTION') {\n        viewRef.detectChanges();\n      } else {\n        viewRef.markForCheck();\n      }\n      /* istanbul ignore next */\n\n\n      var viewCollection = component && component.registeredTemplate ? component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n      propName = propName && component.registeredTemplate ? propName : pName_1;\n\n      if (typeof viewCollection[propName] === 'undefined') {\n        viewCollection[propName] = [];\n      }\n\n      viewCollection[propName].push(viewRef);\n      return viewRef.rootNodes;\n    };\n  }\n}\n/**\n * Property decorator for angular.\n */\n\nexport function Template(defaultValue) {\n  return function (target, key) {\n    var propertyDescriptor = {\n      set: setter(key),\n      get: getter(key, defaultValue),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(target, key, propertyDescriptor);\n  };\n}\n\nfunction setter(key) {\n  return function (val) {\n    if (val === undefined) {\n      return;\n    }\n\n    setValue(key + 'Ref', val, this);\n\n    if (typeof val !== 'string') {\n      val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n      val.elementRef.nativeElement.propName = key;\n    } else {\n      if (this.saveChanges) {\n        this.saveChanges(key, val, undefined);\n        this.dataBind();\n      }\n    }\n  };\n}\n\nfunction getter(key, defaultValue) {\n  return function () {\n    /* istanbul ignore next */\n    return getValue(key + 'Ref', this) || defaultValue;\n  };\n} //tslint:disable-next-line\n\n\nsetTemplateEngine({\n  compile: compile\n});","map":{"version":3,"names":["setTemplateEngine","getTemplateEngine","setValue","getValue","stringCompiler","compile","templateEle","helper","contRef_1","elementRef","nativeElement","_viewContainerRef","pName_1","propName","data","component","context","$implicit","conRef","viewContainerRef","viewRef","createEmbeddedView","detectChanges","markForCheck","viewCollection","registeredTemplate","push","rootNodes","Template","defaultValue","target","key","propertyDescriptor","set","setter","get","getter","enumerable","configurable","Object","defineProperty","val","undefined","saveChanges","dataBind"],"sources":["D:/Primary files/Hims UI/node_modules/@syncfusion/ej2-angular-base/src/template.js"],"sourcesContent":["import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\n * Angular Template Compiler\n */\nexport function compile(templateEle, helper) {\n    if (typeof templateEle === 'string') {\n        return stringCompiler(templateEle, helper);\n    }\n    else {\n        var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n        var pName_1 = templateEle.elementRef.nativeElement.propName;\n        //tslint:disable-next-line        \n        return function (data, component, propName) {\n            var context = { $implicit: data };\n            /* istanbul ignore next */\n            var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n            var viewRef = conRef.createEmbeddedView(templateEle, context);\n            if (getValue('currentInstance.element.nodeName', conRef) === 'EJS-MENTION') {\n                viewRef.detectChanges();\n            }\n            else {\n                viewRef.markForCheck();\n            }\n            /* istanbul ignore next */\n            var viewCollection = (component && component.registeredTemplate) ?\n                component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n            propName = (propName && component.registeredTemplate) ? propName : pName_1;\n            if (typeof viewCollection[propName] === 'undefined') {\n                viewCollection[propName] = [];\n            }\n            viewCollection[propName].push(viewRef);\n            return viewRef.rootNodes;\n        };\n    }\n}\n/**\n * Property decorator for angular.\n */\nexport function Template(defaultValue) {\n    return function (target, key) {\n        var propertyDescriptor = {\n            set: setter(key),\n            get: getter(key, defaultValue),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, propertyDescriptor);\n    };\n}\nfunction setter(key) {\n    return function (val) {\n        if (val === undefined) {\n            return;\n        }\n        setValue(key + 'Ref', val, this);\n        if (typeof val !== 'string') {\n            val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n            val.elementRef.nativeElement.propName = key;\n        }\n        else {\n            if (this.saveChanges) {\n                this.saveChanges(key, val, undefined);\n                this.dataBind();\n            }\n        }\n    };\n}\nfunction getter(key, defaultValue) {\n    return function () {\n        /* istanbul ignore next */\n        return getValue(key + 'Ref', this) || defaultValue;\n    };\n}\n//tslint:disable-next-line\nsetTemplateEngine({ compile: compile });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}